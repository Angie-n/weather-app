/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ "./src/index.js":
/*!**********************!*\
  !*** ./src/index.js ***!
  \**********************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _modules_API_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modules/API.js */ \"./src/modules/API.js\");\n/* harmony import */ var _modules_display_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/display.js */ \"./src/modules/display.js\");\n/* harmony import */ var _modules_localStorage_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./modules/localStorage.js */ \"./src/modules/localStorage.js\");\n\n\n\n\nlet defaultCity;\nif(document.getElementsByClassName(\"delete-city-btn\").length !== 0) defaultCity = document.getElementById(\"saved-cities\").getElementsByTagName(\"li\")[0].textContent;\nelse defaultCity = \"New York\";\n\nasync function getAndDisplay(city) {\n    try {\n        let data = await _modules_API_js__WEBPACK_IMPORTED_MODULE_0__.fetchData(city);\n        await _modules_display_js__WEBPACK_IMPORTED_MODULE_1__.showCity(data).changeAll();\n    }\n    catch(err) {\n        document.getElementById(\"search-error-msg\").textContent = \"Search unsuccessful for \" + city;\n    }\n};\n\ngetAndDisplay(defaultCity);\n\ndocument.getElementById(\"exit-btn\").addEventListener(\"click\", () => document.getElementById(\"other-cities\").style.display = \"none\");\ndocument.getElementById(\"search-btn\").addEventListener(\"click\", () => document.getElementById(\"other-cities\").style.display = \"block\");\n\nconst editSavedCities = () => {\n    let toggleDeleteBtn = () => {\n        let deleteBtns = document.getElementsByClassName(\"delete-city-btn\");\n        for(let i = 0; i < deleteBtns.length; i++) {\n            if(deleteBtns[i].style.display !== \"block\") deleteBtns[i].style.display = \"block\";\n            else deleteBtns[i].style.display = \"none\";\n        }\n    }\n    return {toggleDeleteBtn};\n};\ndocument.getElementById(\"edit-saved-cities-btn\").onclick = () => editSavedCities().toggleDeleteBtn();\n\n//readd events from saved cities in storage\nif(document.getElementsByClassName(\"delete-city-btn\").length !== 0) {\n    if(document.getElementsByClassName(\"delete-city-btn\")[0].style.display === \"block\") editSavedCities().toggleDeleteBtn();\n    let savedCities = [...document.getElementById(\"saved-cities\").getElementsByTagName(\"div\")];\n    savedCities.forEach(c => {\n        c.getElementsByTagName(\"li\")[0].onclick = () => {\n            if(c.textContent !== document.getElementsByTagName(\"h1\")[0].textContent) getAndDisplay(c.textContent);\n        }\n        let deleteBtn = c.getElementsByTagName(\"button\")[0];\n        deleteBtn.onclick = () => {\n            c.remove();\n            if(c.textContent === document.getElementsByTagName(\"h1\")[0].textContent) {\n                document.getElementById(\"bookmark-btn\").getElementsByTagName(\"i\")[0].classList.remove(\"fa-solid\");\n                document.getElementById(\"bookmark-btn\").getElementsByTagName(\"i\")[0].classList.add(\"fa-regular\");\n                document.getElementById(\"bookmark-btn\").getElementsByTagName(\"p\")[0].textContent = \"Bookmark the current city\";\n            }\n            _modules_localStorage_js__WEBPACK_IMPORTED_MODULE_2__.storage().populateStorage();\n        }\n    });\n}\n\nlet search = (() => {\n    let searchDiv = document.getElementById(\"searchbar\");\n    let searchInput = searchDiv.getElementsByTagName(\"input\")[0];\n    let searchSubmit = searchDiv.getElementsByTagName(\"i\")[0];\n    searchInput.addEventListener(\"keypress\", e => {\n        if(e.key === \"Enter\" && searchInput.value.trim() !== \"\") {\n            getAndDisplay(searchInput.value);\n            searchInput.value = \"\";\n            if(document.getElementsByClassName(\"delete-city-btn\").length !== 0 && document.getElementsByClassName(\"delete-city-btn\")[0].style.display === \"block\") editSavedCities().toggleDeleteBtn();\n        }\n    });\n    searchSubmit.addEventListener(\"click\", () => {\n        if(searchInput.value.trim() !== \"\") {\n            getAndDisplay(searchInput.value);\n            searchInput.value = \"\";\n            if(document.getElementsByClassName(\"delete-city-btn\").length !== 0 && document.getElementsByClassName(\"delete-city-btn\")[0].style.display === \"block\") editSavedCities().toggleDeleteBtn();\n        }\n    });\n})();\n\nlet bookmark = (() => {\n    let bookmarkBtn = document.getElementById(\"bookmark-btn\");\n    let bookmarkIcon = bookmarkBtn.getElementsByTagName(\"i\")[0];\n    let bookmarkMessage = bookmarkBtn.getElementsByTagName(\"p\")[0];\n    let toggleBookmark = () => {\n        let cityNodeList = document.getElementById(\"saved-cities\").getElementsByTagName(\"li\");\n        let cityArr = [...cityNodeList].map(c => c.textContent);\n\n        let currentCityName = document.getElementsByTagName(\"h1\")[0].textContent;\n        let index = cityArr.indexOf(currentCityName);\n\n        //Previously bookmarked, clicked to unbookmark\n        if(index !== -1) {\n            bookmarkIcon.classList.remove(\"fa-solid\");\n            bookmarkIcon.classList.add(\"fa-regular\");\n            bookmarkMessage.textContent = \"Bookmark the current city\";\n            document.getElementById(\"saved-cities\").getElementsByTagName(\"div\")[index].remove();\n        }\n        //Not bookmarked yet, click to bookmark\n        else {\n            if(document.getElementsByClassName(\"delete-city-btn\").length !== 0 && document.getElementsByClassName(\"delete-city-btn\")[0].style.display === \"block\") editSavedCities().toggleDeleteBtn();\n            bookmarkIcon.classList.add(\"fa-solid\");\n            bookmarkIcon.classList.remove(\"fa-regular\");\n            bookmarkMessage.textContent = \"Current city has been bookmarked\";\n            let savedDiv = document.createElement(\"div\");\n\n            let savedCity = document.createElement(\"li\");\n            savedCity.textContent = currentCityName;\n            savedCity.onclick = () => {\n                if(savedCity.textContent !== document.getElementsByTagName(\"h1\")[0].textContent) getAndDisplay(currentCityName);\n            }\n\n            let deleteBtn = document.createElement(\"button\");\n            deleteBtn.classList.add(\"delete-city-btn\");\n            let icon = document.createElement(\"i\");\n            icon.classList.add(\"fa-solid\");\n            icon.classList.add(\"fa-circle-minus\");\n            deleteBtn.append(icon);\n            deleteBtn.onclick = () => {\n                savedDiv.remove();\n                if(savedCity.textContent === document.getElementsByTagName(\"h1\")[0].textContent) {\n                    bookmarkIcon.classList.remove(\"fa-solid\");\n                    bookmarkIcon.classList.add(\"fa-regular\");\n                    bookmarkMessage.textContent = \"Bookmark the current city\";\n                }\n                _modules_localStorage_js__WEBPACK_IMPORTED_MODULE_2__.storage().populateStorage();\n            }\n\n            savedDiv.append(savedCity, deleteBtn)\n            document.getElementById(\"saved-cities\").append(savedDiv);\n        }\n        _modules_localStorage_js__WEBPACK_IMPORTED_MODULE_2__.storage().populateStorage();\n    }\n    bookmarkBtn.addEventListener(\"click\", () => toggleBookmark());\n})();\n\n\n\n//# sourceURL=webpack://weather_app/./src/index.js?");

/***/ }),

/***/ "./src/modules/API.js":
/*!****************************!*\
  !*** ./src/modules/API.js ***!
  \****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"extractRelevantData\": () => (/* binding */ extractRelevantData),\n/* harmony export */   \"fetchData\": () => (/* binding */ fetchData)\n/* harmony export */ });\n/* harmony import */ var _city_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./city.js */ \"./src/modules/city.js\");\n/* harmony import */ var _forecast_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./forecast.js */ \"./src/modules/forecast.js\");\n\n\n\nconst extractRelevantData = jsonData => {\n    let cityInfo = jsonData.city;\n    let forecasts = [];\n    jsonData.list.forEach(forecast => {\n        let main = {};\n        for(const prop in forecast.main) if(prop === \"feels_like\" || prop === \"humidity\" || prop === \"temp\" || prop === \"temp_max\" || prop === \"temp_min\") main[prop] = forecast.main[prop];\n        let newForecast = new _forecast_js__WEBPACK_IMPORTED_MODULE_1__.Forecast(forecast.dt_txt, forecast.dt, main, forecast.weather[0], forecast.wind.speed);\n        forecasts.push(newForecast);\n    });\n    let newestCity = new _city_js__WEBPACK_IMPORTED_MODULE_0__.City(cityInfo.name, cityInfo.country, cityInfo.timezone, forecasts);\n    return newestCity;\n}\n\n\nconst fetchData = async (city) => {\n    try {\n        const data = await fetch(\"https://api.openweathermap.org/data/2.5/forecast?q=\" + city + \"&appid=e8952667fc2af0fa9af21038fce9b156\");\n        const jsonData = await data.json();\n        const relevantData = extractRelevantData(jsonData);\n        return relevantData;\n    } catch(err) {\n        console.log(err);\n    }\n}\n\n\n\n\n//# sourceURL=webpack://weather_app/./src/modules/API.js?");

/***/ }),

/***/ "./src/modules/city.js":
/*!*****************************!*\
  !*** ./src/modules/city.js ***!
  \*****************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"City\": () => (/* binding */ City),\n/* harmony export */   \"list\": () => (/* binding */ list)\n/* harmony export */ });\nlet list = [];\n\nclass City {\n    constructor(name, country, timezone, forecasts) {\n        this.name = name;\n        this.country = country;\n        this.timezone = timezone;\n        this.forecasts = forecasts;\n        list.push(this);\n    }\n}\n\n\n\n//# sourceURL=webpack://weather_app/./src/modules/city.js?");

/***/ }),

/***/ "./src/modules/converter.js":
/*!**********************************!*\
  !*** ./src/modules/converter.js ***!
  \**********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"DateConverter\": () => (/* binding */ DateConverter),\n/* harmony export */   \"SpeedConverter\": () => (/* binding */ SpeedConverter),\n/* harmony export */   \"TemperatureConverter\": () => (/* binding */ TemperatureConverter),\n/* harmony export */   \"getIsMetric\": () => (/* binding */ getIsMetric),\n/* harmony export */   \"setIsMetric\": () => (/* binding */ setIsMetric)\n/* harmony export */ });\nlet isMetric = true;\nfunction getIsMetric() {return isMetric;}\nfunction setIsMetric(m) {isMetric = m;}\n\nclass TemperatureConverter {\n    static kelvinToCelsius(k) {\n        let c = k - 273.15;\n        return Math.round(c);\n    }\n    static kelvinToFahrenheit(k) {\n        let f = (k - 273.15) * (9/5) + 32;\n        return Math.round(f);\n    }\n}\n\nclass SpeedConverter {\n    static mpsToMiph(mps) {\n        let miph = mps * 0.000621371 * 3600;\n        return miph.toFixed(2);\n    }\n}\n\n//Pass Date objects\nclass DateConverter {\n\n    static getShiftedHour(date, timezone) {\n        let num = date.getUTCHours();\n\n        let hourShift = timezone / 60 / 60;\n        num = num + hourShift;\n        if(num < 0) num = 24 + num;\n\n        let abb;\n        if (num > 11 && num < 24) abb = \"PM\";\n        else abb = \"AM\";\n\n        num = num % 12;\n        if (num == 0) num = 12;\n\n        return num + \" \" + abb;\n    }\n\n    static getShiftedDayOfWeek(date, timezone) {\n        let dayOfWeek = date.getUTCDay();\n        let currentHour = date.getUTCHours() + (timezone / 60 / 60);\n        let dayShift = 0;\n        if (currentHour < 0) dayShift = -1;\n        else if (currentHour > 23) dayShift = 1;\n        let shiftedDayOfWeek = dayOfWeek + dayShift;\n        if(shiftedDayOfWeek < 0) shiftedDayOfWeek = 7 + shiftedDayOfWeek;\n        else if (shiftedDayOfWeek > 6) shiftedDayOfWeek -= 7;\n        return shiftedDayOfWeek;\n    }\n\n    static dayOfWeekToStr(dayOfWeek) {\n        let daysOfWeek = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"]\n        return daysOfWeek[dayOfWeek];\n    }\n    \n    static getShiftedDayOfMonth(date, timezone) {\n        let dayOfMonth = date.getUTCDate();\n        let currentHour = date.getUTCHours() + (timezone / 60 / 60);\n        let dayShift = 0;\n        if (currentHour < 0) dayShift = -1;\n        else if (currentHour > 23) dayShift = 1;\n        return dayOfMonth + dayShift;\n    }\n    \n}\n\n\n\n\n\n//# sourceURL=webpack://weather_app/./src/modules/converter.js?");

/***/ }),

/***/ "./src/modules/display.js":
/*!********************************!*\
  !*** ./src/modules/display.js ***!
  \********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"showCity\": () => (/* binding */ showCity)\n/* harmony export */ });\n/* harmony import */ var _converter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./converter.js */ \"./src/modules/converter.js\");\n/* harmony import */ var _localStorage_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./localStorage.js */ \"./src/modules/localStorage.js\");\n\n\n\n//Helper functions\nfunction findMostReoccuringElement(arr) {\n    let sortedArr = [...arr].sort();\n    let maxCount = 1;\n    let mostOccuringElement = sortedArr[0];\n\n    let currentCount = 1;\n    let currentElement = sortedArr[0];\n    for(let i = 1; i < sortedArr.length; i++) {\n        if(sortedArr[i] === currentElement) currentCount++;\n        if(sortedArr[i] !== currentElement || i === sortedArr.length - 1) {\n            if(maxCount < currentCount) {\n                maxCount = currentCount;\n                mostOccuringElement = currentElement;\n            }\n            currentCount = 1;\n            currentElement = sortedArr[i];\n        }\n    }\n    return mostOccuringElement;\n}\n\nfunction convertDegrees(temp) {\n    if(_converter_js__WEBPACK_IMPORTED_MODULE_0__.getIsMetric()) return _converter_js__WEBPACK_IMPORTED_MODULE_0__.TemperatureConverter.kelvinToCelsius(temp) + \"˚C\";\n    return _converter_js__WEBPACK_IMPORTED_MODULE_0__.TemperatureConverter.kelvinToFahrenheit(temp) + \"˚F\";\n}\n\nfunction convertSpeed(spd) {\n    if(_converter_js__WEBPACK_IMPORTED_MODULE_0__.getIsMetric()) return spd + \" m/s\";\n    return _converter_js__WEBPACK_IMPORTED_MODULE_0__.SpeedConverter.mpsToMiph(spd) + \" mi/hr\";\n}\n\nfunction checkIfToday(date, timezone) {\n    let today = new Date();\n    if(_converter_js__WEBPACK_IMPORTED_MODULE_0__.DateConverter.getShiftedDayOfMonth(today, timezone) === _converter_js__WEBPACK_IMPORTED_MODULE_0__.DateConverter.getShiftedDayOfMonth(date, timezone)) return true;\n    return false;\n}\n\n//Value on left corresponds to icon value from API, value on right corresponds to image path\nconst iconToBackground = {\n    \"01d\": \"../src/assets/images/clear.jpg\",\n    \"01n\": \"../src/assets/images/clear-n.jpg\",\n    \"02d\": \"../src/assets/images/few-clouds.jpg\",\n    \"02n\": \"../src/assets/images/cloudy-n.jpg\",\n    \"03d\": \"../src/assets/images/scattered-clouds.jpg\",\n    \"03n\": \"../src/assets/images/cloudy-n.jpg\",\n    \"04d\": \"../src/assets/images/broken-clouds.jpg\",\n    \"04n\": \"../src/assets/images/cloudy-n.jpg\",\n    \"09d\": \"../src/assets/images/shower.jpg\",\n    \"09n\": \"../src/assets/images/shower-n.jpg\",\n    \"10d\": \"../src/assets/images/rain.jpg\",\n    \"10n\": \"../src/assets/images/rain-n.jpg\",\n    \"11d\": \"../src/assets/images/thunderstorm.jpg\",\n    \"11n\": \"../src/assets/images/thunderstorm.jpg\",\n    \"13d\": \"../src/assets/images/snow.jpg\",\n    \"13n\": \"../src/assets/images/snow-n.jpg\",\n    \"50d\": \"../src/assets/images/mist.jpg\",\n    \"50n\": \"../src/assets/images/mist.jpg\",\n}\n\nconst showCity = city => {\n    function findCurrentForecast() {\n        let currentTime = new Date();\n        let currentForecast = city.forecasts[0];\n        for(let i = 1; i < city.forecasts.length; i++) {\n            let forecastTime = new Date(city.forecasts[i].dt * 1000);\n            if(currentTime > forecastTime) currentForecast = city.forecasts[i];\n            else {\n                indexOfCurrent = i - 1;\n                break;\n            }\n        }\n        return currentForecast;\n    }\n\n    let indexOfCurrent;\n    let currentForecast = findCurrentForecast();\n\n    let highestTemps = [];\n    let lowestTemps = [];\n\n    let checkBookmark = () => {\n        let bookmarkBtn = document.getElementById(\"bookmark-btn\");\n        let bookmarkIcon = bookmarkBtn.getElementsByTagName(\"i\")[0];\n        let bookmarkMessage = bookmarkBtn.getElementsByTagName(\"p\")[0];\n        let cityNodeList = document.getElementById(\"saved-cities\").getElementsByTagName(\"li\");\n        let cityArr = [...cityNodeList].map((c) => c.textContent);\n        let index = cityArr.indexOf(city.name);\n\n        if(index !== -1) {\n            bookmarkIcon.classList.add(\"fa-solid\");\n            bookmarkIcon.classList.remove(\"fa-regular\");\n            bookmarkMessage.textContent = \"Current city has been bookmarked\";\n        }\n        else {\n            bookmarkIcon.classList.remove(\"fa-solid\");\n            bookmarkIcon.classList.add(\"fa-regular\");\n            bookmarkMessage.textContent = \"Bookmark the current city\";\n        }\n    }\n\n    let clearInfo = () => {\n        document.getElementById(\"other-cities\").style.display = \"none\";\n        document.getElementById(\"search-error-msg\").textContent = \"\";\n        document.getElementById(\"forecast-today\").innerHTML = \"\";\n        document.getElementById(\"forecast-week\").innerHTML = \"\";\n        checkBookmark();\n    }\n\n    let changeCurrentInfo = () => {\n        let temp = convertDegrees(currentForecast.main.temp);\n        let highTemp = \"H: \" + convertDegrees(currentForecast.main.temp_max);\n        let lowTemp = \"L: \" + convertDegrees(currentForecast.main.temp_min);\n        let feelsLike = convertDegrees(currentForecast.main.feels_like);\n        let windSpeed = convertSpeed(currentForecast.windSpeed);\n\n        let weatherImg = iconToBackground[currentForecast.weather.icon];\n        document.getElementById(\"current-info\").style.backgroundImage = 'url(\"' + weatherImg + '\")';\n\n        let locationInfo = document.getElementById(\"location-info\");\n        locationInfo.getElementsByTagName(\"h1\")[0].textContent = city.name;\n        locationInfo.getElementsByTagName(\"p\")[0].textContent = \"(\" + city.country + \")\";\n\n        document.getElementById(\"current-temp\").textContent = temp;\n        document.getElementById(\"high-temp\").textContent = highTemp;\n        document.getElementById(\"low-temp\").textContent = lowTemp;\n\n        let feelsLikeDiv = document.getElementById(\"feels-like\");\n        feelsLikeDiv.getElementsByTagName(\"p\")[1].textContent = feelsLike;\n        let windSpeedDiv = document.getElementById(\"wind-speed\");\n        windSpeedDiv.getElementsByTagName(\"p\")[1].textContent = windSpeed;\n        let humidityDiv = document.getElementById(\"humidity\");\n        humidityDiv.getElementsByTagName(\"p\")[1].textContent = currentForecast.main.humidity + \"%\";\n    }\n\n    let changeTodayForecast = () => {\n        let todayDiv = document.getElementById(\"forecast-today\");\n\n        //Assumes data is given in chronological order. Adds more from tomorrow's forecast to fill 7 slots if there are not enough for today's.\n        for(let i = indexOfCurrent; i < city.forecasts.length; i++) {\n            let forecastDate = new Date(city.forecasts[i].dt * 1000);\n            if(!checkIfToday(forecastDate, city.timezone) && i - indexOfCurrent >= 8) break;\n            else {\n                let timeHeader = document.createElement(\"h3\");\n                timeHeader.textContent = _converter_js__WEBPACK_IMPORTED_MODULE_0__.DateConverter.getShiftedHour(forecastDate, city.timezone);\n\n                let icon = new Image();\n                icon.src = \"http://openweathermap.org/img/wn/\" + city.forecasts[i].weather.icon + \"@2x.png\";\n\n                let tempDisplay = document.createElement(\"p\");\n                tempDisplay.textContent = convertDegrees(city.forecasts[i].main.temp);\n                tempDisplay.classList.add(\"today-temps\");\n\n                let mainWeather = document.createElement(\"p\");\n                mainWeather.textContent = city.forecasts[i].weather.main;\n\n                let container = document.createElement(\"div\");\n                container.append(timeHeader, icon, tempDisplay, mainWeather);\n                if(city.forecasts[i] === currentForecast) container.id = \"current-time\";\n                container.classList.add(\"today-divs\");\n                todayDiv.append(container);\n            }\n        }\n\n    }\n\n    let changeWeekForecast = () => {\n        let weekDiv = document.getElementById(\"forecast-week\");\n\n        let priority1 = [];\n        let priority2 = [];\n        let priority3 = [];\n        let priority4 = [];\n\n        function determinePriority(forecast) {\n            let weather = forecast.weather.main;\n            if (weather === \"Thunderstorm\" || weather === \"Tornado\") priority1.push(forecast);\n            else if (weather === \"Squall\" || weather === \"Sand\" || weather === \"Dust\" || weather === \"Ash\" || weather === \"Smoke\" || weather === \"Haze\") priority2.push(forecast);\n            else if (weather === \"Drizzle\" || weather === \"Rain\" || weather === \"Snow\") priority3.push(forecast);\n            else if (weather === \"Mist\" || weather === \"Fog\" || weather === \"Clear\" || weather === \"Clouds\") priority4.push(forecast);\n            else console.log(\"Unknown weather: \" + weather);\n        }\n\n        function clearPriorities() {\n            priority1 = [];\n            priority2 = [];\n            priority3 = [];\n            priority4 = [];\n        }\n\n        function determineMainWeather(priorityArr) {\n            for(let i = 0; i < priorityArr.length; i++) {\n                if(priorityArr[i].length !== 0) {\n                    let weathers = priorityArr[i].map(f => f.weather.main);\n                    let mainStr = findMostReoccuringElement(weathers);\n                    let mainIcon = priorityArr[i][weathers.indexOf(mainStr)].weather.icon;\n                    if(mainIcon.substring(2) === \"n\") mainIcon = mainIcon.substring(0, 2) + \"d\";\n                    return [mainStr, mainIcon];\n                }\n            }\n            console.log(\"Unable to determine main weather\");\n            return -1;\n        }\n\n        let earliestDate = new Date(currentForecast.dt * 1000);\n        let currentDayOfWeek = _converter_js__WEBPACK_IMPORTED_MODULE_0__.DateConverter.getShiftedDayOfWeek(earliestDate, city.timezone);\n        for(let i = indexOfCurrent; i < city.forecasts.length; i++) {\n            let forecastDate = new Date(city.forecasts[i].dt * 1000);\n            if (currentDayOfWeek === _converter_js__WEBPACK_IMPORTED_MODULE_0__.DateConverter.getShiftedDayOfWeek(forecastDate, city.timezone) && i != city.forecasts.length - 1) determinePriority(city.forecasts[i]);\n            else {\n                if(i === city.forecasts.length - 1) determinePriority(city.forecasts[i]);\n\n                let dayForecasts = [priority1, priority2, priority3, priority4];\n                let timeHeader = document.createElement(\"h3\");\n                if(checkIfToday(new Date(city.forecasts[i-1].dt * 1000), city.timezone)) timeHeader.textContent = \"Today\";\n                else timeHeader.textContent = _converter_js__WEBPACK_IMPORTED_MODULE_0__.DateConverter.dayOfWeekToStr(currentDayOfWeek);\n\n                let mainWeather = determineMainWeather(dayForecasts);\n                let mostOccuringWeatherIcon = mainWeather[1];\n                let icon = new Image(); \n                icon.src = \"http://openweathermap.org/img/wn/\" + mostOccuringWeatherIcon + \"@2x.png\";\n                let iconText = document.createElement(\"p\");\n                iconText.textContent = mainWeather[0];\n                let weatherDiv = document.createElement(\"div\");\n                weatherDiv.classList.add(\"week-weather-forecast\");\n                weatherDiv.append(icon, iconText);\n\n                let lowTemp = document.createElement(\"p\");\n                let lowestTemp = Math.min(...dayForecasts.map(p => {\n                    return Math.min(...p.map(f => f.main.temp_min));\n                })); \n                lowestTemps.push(lowestTemp);\n                lowTemp.textContent = convertDegrees(lowestTemp);\n                let highTemp = document.createElement(\"p\");\n                let highestTemp = Math.max(...dayForecasts.map(p => {\n                    return Math.max(...p.map(f => f.main.temp_max));\n                })); \n                highestTemps.push(highestTemp);\n                highTemp.textContent = convertDegrees(highestTemp);\n                let highLowDiv = document.createElement(\"div\");\n                highLowDiv.classList.add(\"week-high-low\");\n                highLowDiv.append(highTemp, lowTemp);\n\n                let container = document.createElement(\"div\");\n                container.append(timeHeader, weatherDiv, highLowDiv);\n                weekDiv.append(container);\n\n                currentDayOfWeek = (currentDayOfWeek + 1) % 7;\n                clearPriorities();\n                determinePriority(city.forecasts[i]);\n            }\n        }\n    }\n\n    let addEvents = () => {\n        document.getElementById(\"unit-btn\").onclick = () => {\n            if(_converter_js__WEBPACK_IMPORTED_MODULE_0__.getIsMetric()) _converter_js__WEBPACK_IMPORTED_MODULE_0__.setIsMetric(false);\n            else _converter_js__WEBPACK_IMPORTED_MODULE_0__.setIsMetric(true);\n\n            document.getElementById(\"current-temp\").textContent = convertDegrees(currentForecast.main.temp);\n            document.getElementById(\"high-temp\").textContent = \"H: \" + convertDegrees(currentForecast.main.temp_max);\n            document.getElementById(\"low-temp\").textContent = \"L: \" + convertDegrees(currentForecast.main.temp_min);\n\n            document.getElementById(\"feels-like\").getElementsByTagName(\"p\")[1].textContent = convertDegrees(currentForecast.main.feels_like);\n            document.getElementById(\"wind-speed\").getElementsByTagName(\"p\")[1].textContent = convertSpeed(currentForecast.windSpeed);\n\n            let todayTemps = document.getElementsByClassName(\"today-temps\");\n            let forecastIndex = city.forecasts.indexOf(currentForecast)\n            for(let i = 0; i < todayTemps.length; i++) {\n                todayTemps[i].textContent = convertDegrees(city.forecasts[forecastIndex].main.temp);\n                forecastIndex++;\n            }\n\n            let weekTemps = document.getElementsByClassName(\"week-high-low\");\n            for(let i = 0; i < weekTemps.length; i++) {\n                weekTemps[i].getElementsByTagName(\"p\")[0].textContent = convertDegrees(highestTemps[i]);\n                weekTemps[i].getElementsByTagName(\"p\")[1].textContent = convertDegrees(lowestTemps[i]);\n            }\n            _localStorage_js__WEBPACK_IMPORTED_MODULE_1__.storage().populateStorage();\n        };\n    }\n\n    let changeAll = () => {\n        clearInfo();\n        changeCurrentInfo();\n        changeTodayForecast();\n        changeWeekForecast();\n        addEvents();\n    }\n\n    return {changeAll};\n}\n\n\n\n//# sourceURL=webpack://weather_app/./src/modules/display.js?");

/***/ }),

/***/ "./src/modules/forecast.js":
/*!*********************************!*\
  !*** ./src/modules/forecast.js ***!
  \*********************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"Forecast\": () => (/* binding */ Forecast)\n/* harmony export */ });\nclass Forecast {\n    constructor(time, dt, main, weather, windSpeed) {\n        this.time = time;\n        this.dt = dt;\n        this.main = main;\n        this.weather = weather;\n        this.windSpeed = windSpeed;\n    }\n}\n\n\n\n//# sourceURL=webpack://weather_app/./src/modules/forecast.js?");

/***/ }),

/***/ "./src/modules/localStorage.js":
/*!*************************************!*\
  !*** ./src/modules/localStorage.js ***!
  \*************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"storage\": () => (/* binding */ storage)\n/* harmony export */ });\n/* harmony import */ var _converter_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./converter.js */ \"./src/modules/converter.js\");\n\n\n//localStorage.clear();\n\nfunction storageAvailable(type) {\n    var storage;\n    try {\n        storage = window[type];\n        var x = '__storage_test__';\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return true;\n    }\n    catch(e) {\n        return e instanceof DOMException && (\n            e.code === 22 ||\n            e.code === 1014 ||\n            e.name === 'QuotaExceededError' ||\n            e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n            (storage && storage.length !== 0);\n    }\n}\n\nconst storage = () => {\n    let populateStorage = () => {\n        localStorage.setItem(\"savedCities\", document.getElementById(\"saved-cities\").innerHTML);\n        localStorage.setItem(\"isMetric\", (0,_converter_js__WEBPACK_IMPORTED_MODULE_0__.getIsMetric)());\n    }\n\n    let extractStorage = () => {\n        document.getElementById(\"saved-cities\").innerHTML = localStorage.getItem(\"savedCities\");\n        (0,_converter_js__WEBPACK_IMPORTED_MODULE_0__.setIsMetric)(localStorage.getItem(\"isMetric\") === \"true\");\n    }\n    return {populateStorage, extractStorage};\n}\n\nif(storageAvailable(\"localStorage\")) {\n    if(!localStorage.getItem('isMetric')) storage().populateStorage();\n    else storage().extractStorage();\n}\nelse {\n    console.log(\"Local storage not supported.\");\n}\n\n\n\n//# sourceURL=webpack://weather_app/./src/modules/localStorage.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/define property getters */
/******/ 	(() => {
/******/ 		// define getter functions for harmony exports
/******/ 		__webpack_require__.d = (exports, definition) => {
/******/ 			for(var key in definition) {
/******/ 				if(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {
/******/ 					Object.defineProperty(exports, key, { enumerable: true, get: definition[key] });
/******/ 				}
/******/ 			}
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/make namespace object */
/******/ 	(() => {
/******/ 		// define __esModule on exports
/******/ 		__webpack_require__.r = (exports) => {
/******/ 			if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 				Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 			}
/******/ 			Object.defineProperty(exports, '__esModule', { value: true });
/******/ 		};
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = __webpack_require__("./src/index.js");
/******/ 	
/******/ })()
;